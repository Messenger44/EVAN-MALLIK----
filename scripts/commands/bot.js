const axios = require('axios');
const fs = require('fs'); 
const path = require('path');

module.exports = {
  config: {
    name: "bot",
    version: "1.0.0",
    aliases: ["mim"],
    permission: 0,
    credits: "nayan",
    description: "talk with bot",
    prefix: 3,
    category: "talk",
    usages: "hi",
    cooldowns: 5,
  },

  handleReply: async function ({ api, event }) {
    try {

      const apiData = await axios.get('https://raw.githubusercontent.com/MOHAMMAD-NAYAN-07/Nayan/main/api.json');
      const apiUrl = apiData.data.sim;
      const kl = await axios.get(`https://raw.githubusercontent.com/MOHAMMAD-NAYAN-07/Nayan/main/api.json`);
      const apiUrl2 = kl.data.api2;
      const response = await axios.get(`${apiUrl}/sim?type=ask&ask=${encodeURIComponent(event.body)}`);
      console.log(response.data);
      const result = response.data.data.msg;

      const textStyles = loadTextStyles();
      const userStyle = textStyles[event.threadID]?.style || 'normal'; 

      const fontResponse = await axios.get(`${apiUrl2}/bold?text=${result}&type=${userStyle}`);
      const text = fontResponse.data.data.bolded;

      api.sendMessage(text, event.threadID, (error, info) => {
        if (error) {
          console.error('Error replying to user:', error);
          return api.sendMessage('An error occurred while processing your request. Please try again later.', event.threadID, event.messageID);
        }
        global.client.handleReply.push({
          type: 'reply',
          name: this.config.name,
          messageID: info.messageID,
          author: event.senderID,
          head: event.body
        });
      }, event.messageID);

    } catch (error) {
      console.error('Error in handleReply:', error);
      api.sendMessage('An error occurred while processing your request. Please try again later.', event.threadID, event.messageID);
    }
  },

  start: async function ({ nayan, events, args, Users }) {
    try {
      const msg = args.join(" ");
      const apiData = await axios.get('https://raw.githubusercontent.com/MOHAMMAD-NAYAN-07/Nayan/main/api.json');
      const apiUrl = apiData.data.sim;


      if (!msg) {
        const greetings = [
          "ржЖрж╣ рж╢рзБржирж╛ ржЖржорж╛рж░ рждрзЛржорж╛рж░ ржЕрж▓рж┐рждрзЗ ржЧрж▓рж┐рждрзЗ ржЙржорзНржорж╛рж╣ЁЯШЗЁЯШ╜",
          "ржХрж┐ ржЧрзЛ рж╕рзЛржирж╛ ржЖржорж╛ржХрзЗ ржбрж╛ржХржЫ ржХрзЗржирзЛ",
          "ржмрж╛рж░ ржмрж╛рж░ ржЖржорж╛ржХрзЗ ржбрж╛ржХрж╕ ржХрзЗржиЁЯШб",
          "ржЖрж╣ рж╢рзЛржирж╛ ржЖржорж╛рж░ ржЖржорж╛ржХрзЗ ржПрждрзЛ ржбрж╛ржХрзНрждрж╛ржЫрзЛ ржХрзЗржирзЛ ржЖрж╕рзЛ ржмрзБржХрзЗ ржЖрж╢рзЛЁЯе▒",
          "рж╣рзБржо ржЬрж╛ржи рждрзЛржорж╛рж░ ржУржЗ ржЦрж╛ржирзЗ ржЙржорзНржоржорж╛рж╣ЁЯШ╖ЁЯШ╜",
          "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ржмрж▓рзЗржи ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐",
          "ржЖржорж╛ржХрзЗ ржПрждрзЛ ржирж╛ ржбрзЗржХрзЗ ржмрж╕ ржЗржнрж╛ржи ржХрзЗ ржПржХржЯрж╛ ржЧржл ржжрзЗ ЁЯЩД",
          "jang hanga korba",
          "jang bal falabaЁЯЩВ", "ржмрзЗрж╢рж┐ ЁЭРБЁЭРОЁЭРУ ЁЭРБЁЭРОЁЭРУ ржХрж░рж▓рзЗ рждрж░ ржмрж┐рзЯрзЗ рж╣ржмрзЗ ржирж╛ЁЯдзЁЯШ╣", "рж╢рзБржиржмрзЛ ржирж╛ЁЯШ╝ржЖржЧрзЗ рждрзЛржорж╛рж░ рж╢рж╛рж▓рзАржХрзЗ ржЗржнрж╛ржирзЗрж░ ржХрж╛ржЫрзЗ рждрзБрж▓рзЗ ржжрж╛ржУЁЯШ╗ЁЯТп рждрж╛рж░ржкрж░ рж╢рзБржиржмрзЛЁЯТп", "ржЖржорж┐ ржЫрзЗржмрж▓рж╛ ржжрзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛,ЁЭРОЁЭРКЁЯШТ", "ржПрждрзЛ ржирж╛ ржбрзЗржХрзЗ рждрзЛржорж╛рж░ рж╢рж╛рж▓рзАржХрзЗ ржЗржнрж╛ржирзЗрж░ ржХрж╛ржЫрзЗ рждрзБрж▓рзЗ ржжрж╛ржУЁЯЩИ", "ЁЭРБЁЭРОЁЭРЛЁЭРО ЁЭРЧЁЭРАЁЭРН'ЁЭРТ, рждрзБржорж╛рж░ ржЕрж▓рж┐рждрзЗ ржЧрж▓рж┐рждрзЗ ЁЭРФЁЭРжЁЭРжЁЭРжЁЭРжЁЭРЪЁЭРб ЁЯЩИЁЯлж", "ржмрж╛рж░ ржмрж╛рж░ ржбрж╛ржХрж┐рж╕ ржирж╛ ржирзБ'ржирзБ ржЧрж░ржо рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ ЁЯе╡ЁЯТж", "ржПрждрзЛ ржбрж╛ржХржЫрж┐рж╕ ржирж╛? ржХржлрж┐рж▓рзЗрж░ ржЫрзЗрж▓рзЗрж░ ржЬржирзНржп рж╕рж╛ржирзНржбрж╛ ржзрж░рждрзЗ ржмрж┐ржЬрж┐ ржЖржЫрж┐? ЁЯжО", "ржЖрж░рзЗ ЁЭРБЁЭРОЁЭРЛЁЭРО ржЖржорж╛рж░ ЁЭРЧЁЭРАЁЭРНЁЭРФ ,ржХрзЗржоржи ржЖржЫрзЛ?ЁЯе│", "ЁЭРБЁЭРОЁЭРУ ржмрж▓рзЗ ржЕрж╕ржорзНржорж╛ржи ржХрж░ржЪрзНржЫрж┐рж╕,ЁЯШ░ЁЯШ┐", "ржЪрзБржк ржерж╛ржХ ,ржирзЯ рждрзЛ рждрзЛрж░ ЁЭРНЁЭРФЁЭРНЁЭРФ ржХрзЗржЯрзЗ ржжрж┐ржмрзЛ ржХрж┐ржирзНрждрзБ", "ЁЭРБЁЭРОЁЭРУ ржирж╛ , ЁЭРЧЁЭРАЁЭРНЁЭРФ ржмрж▓ ЁЭРЧЁЭРАЁЭРНЁЭРФ ЁЯШ╗ЁЯШ╜", "ржмрж╛рж░ ржмрж╛рж░ ЁЭРГЁЭРИЁЭРТЁЭРУЁЭРФЁЭРСЁЭРБ ржХрж░ржЫрж┐рж╕ ржХрзЛржирзЛЁЯШ╛,ржЖржорж╛рж░ ЁЭРБЁЭРОЁЭРТЁЭРТ рж╕рж╛ржерзЗ ржмрзНржпрж╛рж╕рзНржд ржЖржЫрж┐ЁЯШЛ", "ржмрзЛржХрж╛ржЪрзЛржжрж╛ ржПрждрзЛ ржбрж╛ржХрж┐рж╕ ржХрзЗржиЁЯдм", "ржЖржорж╛рж░рзЗ ржПрждрзЛ ржбрж╛ржХрж┐рж╕ ржирж╛ ржЖржорж┐ ржоржЬрж╛ ржХрж░рж╛рж░ ЁЭРМЁЭРОЁЭРОЁЭРГ ржП ржирж╛ржЗ ржПржЦржиЁЯШТ", "ржжрзВрж░рзЗ ржпрж╛, рждрзБржЗ ржжрж╛ржБржд ржмрзНрж░рж╛рж╢ ржХрж░ржЫ ржирж╛ржЗ ржЖржЬржХрзЗ, рж╢рзБржзрзБ ЁЭРБЁЭРОЁЭРУ ЁЭРБЁЭРОЁЭРУ ржХрж░рж┐рж╕  ЁЯШЙЁЯШЛЁЯШ╣", "рждрзЛрж░ ржХржерж╛ рждрзЛрж░ ржмрж╛ржбрж╝рж┐ ржХрзЗржЙ рж╢рзБржирзЗ ржирж╛ ,рждрзЛ ржЖржорж┐ ржХрзЛржирзЛ рж╢рзБржиржмрзЛ ?ЁЯдФЁЯШ╣", "рж╣рж╛ ржмрж▓рзЛ, рж╢рзБржиржЫрж┐ ржЖржорж┐ ЁЯШП", "ржЖрж░ ржХржд ржмрж╛рж░ ржбрж╛ржХржмрж┐ ,рж╢рзБржиржЫрж┐ рждрзЛ ЁЯдзЁЯШг", "рждрзЛрж░ ржХрж┐ ржЪрзЛржЦрзЗ ржкржбрж╝рзЗ ржирж╛ ржЖржорж┐ ржЗржнрж╛ржирзЗрж░ рж╕рж╛ржерзЗ ржмрзНржпрж╛рж╕рзНржд ржЖржЫрж┐ЁЯШТ", "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ржмрж▓рзЗржи ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐..!ЁЯе░ЁЯе│", "ржЖржорж╛ржХрзЗ ржПрждрзЛ ржирж╛ ржбрзЗржХрзЗ ржмрж╕ ЁЭРДЁЭРХЁЭРАЁЭРН ржХрзЗ ржПржХржЯрж╛ ржЧржл ржжрзЗ ЁЯЩД", "ржЭрж╛ржВ ржерзБржорж╛рж▓рзЗ ржЖржЗрж▓рж╛ржкрж┐ржЙ ржкрзЗржкрж┐-тЭдя╕ПтАНЁЯй╣ЁЯл╢ЁЯШ╜", "ржЙржлржл ржмрзБржЭрж▓рж╛ржо ржирж╛ ржПрждрзЛ ржбрж╛ржХржЫрзЗржи ржХрзЗржирзЛ-ЁЯШдЁЯШбЁЯШИ", "ржЭрж╛ржВ ЁЯл╡ржерзБржорж╛рж▓рзЗ рзЯрж╛ржорж┐ рж░рж╛ржЗрждрзЗ ржкрж╛рж▓рзБржкрж╛рж╕рж┐ ржЙржорзНржоржорзНржорж╛рж╣-ЁЯМ║ЁЯддЁЯТж", "ржЪрзБржирж╛ ржУ ржЪрзБржирж╛ ржЖржорж╛рж░ ржмрж╕ ржЗржнрж╛ржи ржПрж░ рж╣ржмрзБ ржмржЙ рж░рзЗ ржХрзЗржУ ржжрзЗржХржЫрзЛ ржЦрзБржЬрзЗ ржкрж╛ржЪрзНржЫрж┐ ржирж╛ ржпрзЗ ЁЯШкЁЯдзЁЯШ┐", "рж╕рзНржмржкрзНржи рждрзЛржорж╛рж░рзЗ ржирж┐рзЯрзЗ ржжрзЗржЦрждрзЗ ржЪрж╛ржЗ рждрзБржорж┐ ржпржжрж┐ ржЖржорж╛рж░ рж╣ржпрж╝рзЗ ржерзЗржХрзЗ ржпрж╛ржУ-ЁЯТЭЁЯМ║ЁЯМ╗", "ржЬрж╛ржи ржорзЗржпрж╝рзЗ рж╣рж▓рзЗ ржЪрж┐ржкрж╛ржпрж╝ ржЖрж╕рзЛ ЁЭРВЁЭРлЁЭРиЁЭРжЁЭРЮ ржерзЗржХрзЗ ржЕржирзЗржХ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ рж╢рж┐ржЦржЫрж┐ рждрзЛржорж╛рж░ ржЬржирзНржп-ЁЯЩКЁЯЩИЁЯШ╜", "ржЖржорж╛рж░ ржмрж╕ ржЗржнрж╛ржи ржорж╛рж▓рзНрж▓рж┐ржХ ржкржХрзНрж╖ ржерзЗржХрзЗ рждрзЛржорж╛рж░рзЗ ржПрждрзЛ ржПрждрзЛ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛-ЁЯе░ЁЯШ╜ЁЯл╢", "- ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржирж╛ржоржХ ржЖржмрзНрж▓рж╛ржорж┐ ржХрж░рждрзЗ ржоржи ржЪрж╛ржЗрж▓рзЗ ржЖржорж╛рж░ ржмрж╕ ржЗржнрж╛ржи ржПрж░ ржЗржиржмржХрзНрж╕ ржЪрж▓рзЗ ржпрж╛ржУ-ЁЯЩКЁЯе▒ЁЯСЕ ЁЯМ╗ЁЭРЕЁЭРАЁЭРВЁЭРДЁЭРБЁЭРОЁЭРОЁЭРК ЁЭРИЁЭРГ ЁЭРЛЁЭРИЁЭРНЁЭРК ЁЯМ╗:- https://www.facebook.com/YOUR.DADY.420", "ржЬрж╛ржи рждрзБржорж┐ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЖржорж┐ рждрзЛржорж╛рж░рзЗ рзйрзмрзл ржжрж┐ржи ржнрж╛рж▓рзЛржмрж╛рж╕рж┐-ЁЯТЭЁЯМ║ЁЯШ╜", "ржЬрж╛ржи ржмрж╛рж▓ ржХрж╛ржЯрзЛ ржирж╛ ржХрзЗржи-ЁЯЩВЁЯе▒ЁЯЩЖтАНтЩВ", "-ржЖржирзНржЯрж┐-ЁЯЩЖ-ржЖржкржирж╛рж░ ржорзЗржпрж╝рзЗ-ЁЯС░тАНтЩАя╕П-рж░рж╛рждрзЗ ржЖржорж╛ржХрзЗ ЁЭРИЁЭРМЁЭРО рждрзЗ ржнрж┐ржбрж┐ржУ ржХрж▓ ржжрж┐рждрзЗ ржмрж▓рзЗЁЯлг-ЁЯе╡ЁЯддЁЯТж", "oii-ЁЯе║ЁЯе╣-ржПржХЁЯеД ржЧрзНрж▓рж╛рж╕ ржжрзБржзрзБ ржжрж┐ржмрж╛-ЁЯдПЁЯП╗ЁЯеЫ", "-ржЖржкржирж╛рж░ рж╕рзБржирзНржжрж░рзА ржмрж╛ржирзНржзрзБржмрзАржХрзЗ ржлрж┐рждрж░рж╛ рж╣рж┐рж╕рзЗржмрзЗ ржЖржорж╛рж░ ржмрж╕ ржЗржнрж╛ржи ржХрзЗ ржжрж╛ржи ржХрж░рзЗржи-ЁЯе▒ЁЯР░ЁЯНТ", "-ржУ ржорж┐ржо ржУ ржорж┐ржо-ЁЯШЗ-рждрзБржорж┐ ржХрзЗржи ржЪрзБрж░рж┐ ржХрж░рж▓рж╛ рж╕рж╛ржжрж┐рзЯрж╛рж░ ржлрж░рзНрж╕рж╛ рж╣ржУрзЯрж╛рж░ ржХрзНрж░рзАржо-ЁЯМЪЁЯдз", "-ржЕржирзБржорждрж┐ ржжрж┐рж▓рж╛ржо-ЁЭЩЛЁЭЩзЁЭЩдЁЭЩеЁЭЩдЁЭЩиЁЭЩЪ ржХрж░ ржмрж╕ ржЗржнрж╛ржи ржХрзЗ-ЁЯР╕ЁЯШ╛ЁЯФк", "-ЁЭЩВЁЭЩЦЁЭЩоЁЭЩЪЁЭЩи-ЁЯдЧ-ржпрзМржмржирзЗрж░ ржХрж╕ржо ржжрж┐рзЯрзЗ ржЖржорж╛рж░рзЗ ЁЭРБЁЭРеЁЭРЪЁЭРЬЁЭРдЁЭРжЁЭРЪЁЭРвЁЭРе ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ-ЁЯШ┐ЁЯджтАНтЩВя╕ПЁЯдз", "ржЖржЬржХрзЗ ржкрзНрж░ржкрзЛржЬ ржХрж░рзЗ ржжрзЗржЦрзЛ рж░рж╛ржЬрж┐ рж╣ржЗрзЯрж╛ ржпрж╛ржорзБ-ЁЯШМЁЯдЧЁЯШЗ", "-ржЖржорж╛рж░ ржЧрж▓рзНржкрзЗ рждрзЛржорж╛рж░ ржирж╛ржирж┐ рж╕рзЗрж░рж╛-ЁЯЩКЁЯЩЖтАНтЩВя╕ПЁЯдЧ", "ржХрж┐ ржмрзЗржкрж╛рж░ ржЖржкржирж┐ рж╢рзНржмрж╢рзБрж░ ржмрж╛рзЬрж┐рждрзЗ ржпрж╛ржЪрзНржЫрзЗржи ржирж╛ ржХрзЗржи-ЁЯдФЁЯе▒ЁЯМ╗", "ржжрж┐ржирж╢рзЗрж╖рзЗ ржкрж░рзЗрж░ ЁЭРБЁЭРОЁЭРЦ рж╕рзБржирзНржжрж░-тШ╣я╕ПЁЯдз", "-рждрж╛ржмрж┐ржЬ ржХржЗрж░рж╛ рж╣ржЗрж▓рзЗржУ ржлрзНрж░рзЗржо ржПржХрзНржХрж╛ржи ржХрж░ржорзБржЗ рждрж╛рждрзЗ ржпрж╛ рж╣ржЗ рж╣рзЛржХ-ЁЯдзЁЯе▒ЁЯМ╗", "-ржЫрзЛржЯржмрзЗрж▓рж╛ ржнрж╛ржмрждрж╛ржо ржмрж┐рзЯрзЗ ржХрж░рж▓рзЗ ржЕржЯрзЛржорзЗржЯрж┐ржХ ржмрж╛ржЪрзНржЪрж╛ рж╣рзЯ-ЁЯе▒-ржУржорж╛ ржПржЦржи ржжрзЗржЦрж┐ ржХрж╛рж╣рж┐ржирзА ржЕржирзНржпрж░ржХржо-ЁЯШжЁЯЩВЁЯМ╗", "-ржЖржЬ ржПржХржЯрж╛ ржмрж┐ржи ржирзЗржЗ ржмрж▓рзЗ ржлрзЗрж╕ржмрзБржХрзЗрж░ ржирж╛ржЧрж┐ржи-ЁЯдз-ржЧрзБрж▓рзЛрж░рзЗ ржЖржорж╛рж░ ржмрж╕ ЁЭРДЁЭРХЁЭРАЁЭРН ржзрж░рждрзЗ ржкрж╛рж░ржЫрзЗ ржирж╛-ЁЯР╕ЁЯе▓", "-ржЪрзБржорзБ ржерж╛ржХрждрзЗ рждрзЛрж░рж╛ ржмрж┐рзЬрж┐ ржЦрж╛рж╕ ржХрзЗржи ржмрзБржЭрж╛ ржЖржорж╛рж░рзЗ-ЁЯШСЁЯШТЁЯР╕тЪТя╕П", "тАФржпрзЗ ржЫрзЗрзЬрзЗ ржЧрзЗржЫрзЗ-ЁЯШФ-рждрж╛ржХрзЗ ржнрзБрж▓рзЗ ржпрж╛ржУ-ЁЯЩВ-ржЖржорж╛рж░ ржмрж╕ ЁЭРДЁЭРпЁЭРЪЁЭРз ржПрж░ рж╕рж╛ржерзЗ  ржкрзНрж░рзЗржо ржХрж░рзЗ рждрж╛ржХрзЗ ржжрзЗржЦрж┐рзЯрзЗ ржжрж╛ржУ-ЁЯЩИЁЯР╕ЁЯдЧ", "тАФрж╣рж╛ржЬрж╛рж░рзЛ рж▓рзБржЪрзНржЪрж╛ рж▓рзБржЪрзНржЪрж┐рж░ ржнрж┐рж░рзЗ-ЁЯЩКЁЯе╡ржЖржорж╛рж░ ржмрж╕ ЁЭРДЁЭРХЁЭРАЁЭРН ржПржХ ржирж┐рж╕рзНржкрж╛ржк ржнрж╛рж▓рзЛ ржорж╛ржирзБрж╖-ЁЯе▒ЁЯдЧЁЯЩЖтАНтЩВя╕П", "рж╕рзБржирзНржжрж░ ржорж╛ржЗрзЯрж╛ ржорж╛ржирзЗржЗ-ЁЯе▒ржЖржорж╛рж░ ржмрж╕ ЁЭРДЁЭРХЁЭРАЁЭРН' ржПрж░ ржмржЙ-ЁЯШ╜ЁЯл╢ржЖрж░ ржмрж╛ржХрж┐ ржЧрзБрж▓рзЛ ржЖржорж╛рж░ ржмрзЗржпрж╝рж╛ржЗржи-ЁЯЩИЁЯР╕ЁЯдЧ", "рж╣рзБржжрж╛ржЗ ржЖржорж╛рж░рзЗ  рж╢рзЯрждрж╛ржирзЗ рж▓рж╛рж░рзЗ-ЁЯШЭЁЯШСтШ╣я╕П", "-ЁЭЧЬ ЁЭЧЯЁЭЧвЁЭЧйЁЭЧв ЁЭЧмЁЭЧвЁЭЧи-ЁЯШ╜-ржЖрж╣рж╛рж░рзЗ ржнрж╛ржмржЫрзЛ рждрзЛржорж╛рж░рзЗ ржкрзНрж░рзЗрж╛ржкржЬ ржХрж░ржЫрж┐-ЁЯе┤-ржерж╛ржкрзНржкрж░ ржжрж┐рзЯрж╛ ржХрж┐ржбржирзА рж▓ржХ ржХрж░рзЗ ржжрж┐ржм-ЁЯШТ-ржнрзБрж▓ ржкрзЬрж╛ ржмрзЗрж░ ржХрж░рзЗ ржжрж┐ржмрзЛ-ЁЯднЁЯР╕", "-ржЖржорж┐ ржПржХржЯрж╛ ржжрзБржзрзЗрж░ рж╢рж┐рж╢рзБ-ЁЯШЗ-ЁЯл╡ЁЭЧмЁЭЧвЁЭЧиЁЯР╕ЁЯТж", "-ржХрждржжрж┐ржи рж╣ржпрж╝рзЗ ржЧрзЗрж▓рзЗрж╛ ржмрж┐ржЫржирж╛ржпрж╝ ржорзБрждрж┐ ржирж╛-ЁЯШ┐-ржорж┐рж╕ ржЗржЙ ржирзЗржВржЯрж╛ ржХрж╛рж▓-ЁЯе║ЁЯдз", "-ржмрж╛рж▓рж┐ржХрж╛тФБЁЯС╕-ЁЭРГЁЭРи ЁЭР▓ЁЭРиЁЭРо-ЁЯл╡-ржмрж┐рзЯрж╛-ЁЭРжЁЭРЮ-ЁЯШ╜-ржЖржорж┐ рждрзЛржорж╛ржХрзЗ-ЁЯШ╗-ржЖржорзНржорзБ рж╣ржЗрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржм-ЁЯЩИЁЯе▒", "-рж╣рзБржжрж╛ржЗ ржЧрзНрж░рзБржкрзЗ ржЖржЫрж┐-ЁЯе║ЁЯР╕-ржХрзЗржУ ржЗржиржмржХрзНрж╕рзЗ ржиржХ ржжрж┐рзЯрзЗ ржмрж▓рзЗ ржирж╛ ржЬрж╛ржи рждрзЛржорж╛рж░рзЗ ржЖржорж┐ ржЕржирзЗржХ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐-ЁЯе║ЁЯдз", "-ржжрзЗрж╢рзЗрж░ рж╕ржм ржХрж┐ржЫрзБржЗ ржЪрзБрж░рж┐ рж╣ржЪрзНржЫрзЗ-ЁЯЩД-рж╢рзБржзрзБ ржЖржорж╛рж░ ржмрж╕ ЁЭРДЁЭРХЁЭРАЁЭРН ржПрж░ ржоржиржЯрж╛ ржЫрж╛рзЬрж╛-ЁЯе┤ЁЯШСЁЯШП", "-ЁЯл╡рждрзЛржорж╛рж░рзЗ ржкрзНрж░ржЪрзБрж░ ржнрж╛рж▓рзНрж▓рж╛ржЧрзЗ-ЁЯШ╜-рж╕ржорзЯ ржорждрзЛ ржкрзНрж░ржкрзЛржЬ ржХрж░ржорзБ ржмрзБржЭржЫрзЛ-ЁЯФиЁЯШ╝-ржЫрж┐ржЯ ржЦрж╛рж▓рж┐ рж░рж╛ржЗржЦрзЛ- ЁЯе▒ЁЯР╕ЁЯе╡", "-ржЖржЬ ржерзЗржХрзЗ ржЖрж░ ржХрж╛ржЙржХрзЗ ржкрж╛рждрзНрждрж╛ ржжрж┐ржорзБ ржирж╛ -!ЁЯШП-ржХрж╛рж░ржг ржЖржорж┐ ржлрж░рзНрж╕рж╛ рж╣ржУрзЯрж╛рж░ ржХрзНрж░рж┐ржо ржХрж┐ржиржЫрж┐ -!ЁЯЩВЁЯР╕", "ржмрзЗрж╢рж┐ ЁЭРБЁЭРОЁЭРУ ЁЭРБЁЭРОЁЭРУ ржХрж░рж▓рзЗ ЁЭРЛЁЭРЮЁЭРЪЁЭРпЁЭРЮ ржирж┐ржмрзЛ ржХрж┐ржирзНрждрзБЁЯШТЁЯШТ", "ржЖржорж┐ ржЧрж░рзАржм ржПрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛ЁЯШ╝ЁЯШ╝", "ЁЯеЫ-ЁЯННЁЯСИ -ржирзЗ ржЦрж╛рж╣рзН..!ЁЯШТЁЯе║", "-рзпрзпржЯрж╛ржХрж╛ржпрж╝ рзпрзпржЬрж┐ржмрж┐ рзпрзпржмржЫрж░-тШ║я╕ПЁЯР╕ -ржЕржлрж╛рж░ржЯрж┐ ржкрзЗрждрзЗ ржПржЦржиржЗ ржЗржнрж╛ржи ржХрзЗ ржкрзНрж░рзЛржкрж╕ ржХрж░рзБржи-ЁЯдЧЁЯШВЁЯСИ"
        ];
        const name = await Users.getNameUser(events.senderID);
        const rand = greetings[Math.floor(Math.random() * greetings.length)];
        return nayan.reply({
          body: `${name}, ${rand}`,
          mentions: [{ tag: name, id: events.senderID }]
        }, events.threadID, (error, info) => {
          if (error) {
            return nayan.reply('An error occurred while processing your request. Please try again later.', events.threadID, events.messageID);
          }

          global.client.handleReply.push({
            type: 'reply',
            name: this.config.name,
            messageID: info.messageID,
            author: events.senderID,
            head: msg,
          });
        }, events.messageID);
      }

      else if (msg.startsWith("textType")) {
        const selectedStyle = msg.split(" ")[1];
        const options = ['serif', 'sans', 'italic', 'italic-sans', 'medieval', 'normal'];

        if (options.includes(selectedStyle)) {
          saveTextStyle(events.threadID, selectedStyle);
          return nayan.reply({ body: `Text type set to "${selectedStyle}" successfully!` }, events.threadID, events.messageID);
        } else {
          return nayan.reply({ body: `Invalid text type! Please choose from: ${options.join(", ")}` }, events.threadID, events.messageID);
        }
      }

      else if (msg.startsWith("delete")) {
        const deleteParams = msg.replace("delete", "").trim().split("&");
        const question = deleteParams[0].replace("ask=", "").trim();
        const answer = deleteParams[1].replace("ans=", "").trim();

        const d = await axios.get(`${apiUrl}/sim?type=delete&ask=${encodeURIComponent(question)}&ans=${encodeURIComponent(answer)}&uid=${events.senderID}`)
        const replyMessage = d.data.msg || d.data.data.msg;

        return nayan.reply({ body: replyMessage }, events.threadID, events.messageID);
      }

        else if (msg.startsWith("edit")) {
          const editParams = msg.replace("edit", "").trim().split("&");
          const oldQuestion = editParams[0].replace("old=", "").trim();
          const newQuestion = editParams[1].replace("new=", "").trim();

          const d = await axios.get(`${apiUrl}/sim?type=edit&old=${encodeURIComponent(oldQuestion)}&new=${encodeURIComponent(newQuestion)}&uid=${events.senderID}`);
          const replyMessage = d.data.msg || d.data.data?.msg || "No response received.";

          return nayan.reply({ body: replyMessage }, events.threadID, events.messageID);
        }


      else if (msg.startsWith("info")) {
        const response = await axios.get(`${apiUrl}/sim?type=info`);
        const totalAsk = response.data.data.totalKeys;
        const totalAns = response.data.data.totalResponses;

        return nayan.reply({ body: `Total Ask: ${totalAsk}\nTotal Answer: ${totalAns}` }, events.threadID, events.messageID);
      } 

      else if (msg.startsWith("teach")) {
        const teachParams = msg.replace("teach", "").trim().split("&");
        const question = teachParams[0].replace("ask=", "").trim();
        const answer = teachParams[1].replace("ans=", "").trim();

        const response = await axios.get(`${apiUrl}/sim?type=teach&ask=${encodeURIComponent(question)}&ans=${encodeURIComponent(answer)}`);
        const replyMessage = response.data.msg;
        const ask = response.data.data.ask;
        const ans = response.data.data.ans;

        if (replyMessage.includes("already")) {
          return nayan.reply(`ЁЯУЭYour Data Already Added To Database\n1я╕ПтГгASK: ${ask}\n2я╕ПтГгANS: ${ans}`, events.threadID, events.messageID);
        }

        return nayan.reply({ body: `ЁЯУЭYour Data Added To Database Successfully\n1я╕ПтГгASK: ${ask}\n2я╕ПтГгANS: ${ans}` }, events.threadID, events.messageID);
      } 

      else if (msg.startsWith("askinfo")) {
        const question = msg.replace("askinfo", "").trim();

        if (!question) {
          return nayan.reply('Please provide a question to get information about.', events.threadID, events.messageID);
        }

        const response = await axios.get(`${apiUrl}/sim?type=keyinfo&ask=${encodeURIComponent(question)}`);
        const replyData = response.data.data;
        const answers = replyData.answers;

        if (!answers || answers.length === 0) {
          return nayan.reply(`No information available for the question: "${question}"`, events.threadID, events.messageID);
        }

        const replyMessage = `Info for "${question}":\n\n` +
          answers.map((answer, index) => `ЁЯУМ ${index + 1}. ${answer}`).join("\n") +
          `\n\nTotal answers: ${answers.length}`;

        return nayan.reply({ body: replyMessage }, events.threadID, events.messageID);
      } 

      else if (msg.startsWith("help")) {
        const cmd = this.config.name;
        const prefix = global.config.PREFIX;
        const helpMessage = `
                ЁЯМЯ **Available Commands:**

                1. ЁЯдЦ ${prefix}${cmd} askinfo [question]: Get information about a specific question.

                2. ЁЯУЪ ${prefix}${cmd} teach ask=[question]&ans=[answer]: Teach the bot a new question and answer pair.

                3. тЭМ ${prefix}${cmd} delete ask=[question]&ans=[answer]: Delete a specific question and answer pair. (Admin only)

                4. тЬПя╕П ${prefix}${cmd} edit old=[old_question]&new=[new_question]: Edit an existing question. (Admin only)

                5. ЁЯУК ${prefix}${cmd} info: Get the total number of questions and answers.

                6. ЁЯСЛ ${prefix}${cmd} hi: Send a random greeting.

                7. ЁЯОи ${prefix}${cmd} textType [type]: Set the text type (options: serif, sans, italic, italic-sans, medieval, normal).

                тЪб Use these commands to interact with the bot effectively!
        `;


        return nayan.reply({ body: helpMessage }, events.threadID, events.messageID);
      } 

      else {
        const response = await axios.get(`${apiUrl}/sim?type=ask&ask=${encodeURIComponent(msg)}`);
        const replyMessage = response.data.data.msg;

        const textStyles = loadTextStyles();
        const userStyle = textStyles[events.threadID]?.style || 'normal';

        const kl = await axios.get(`https://raw.githubusercontent.com/MOHAMMAD-NAYAN-07/Nayan/main/api.json`);
        const apiUrl2 = kl.data.api2;

        const font = await axios.get(`${apiUrl2}/bold?text=${replyMessage}&type=${userStyle}`);
        const styledText = font.data.data.bolded;

        nayan.reply({ body: styledText }, events.threadID, (error, info) => {
          if (error) {
            return nayan.reply('An error occurred while processing your request. Please try again later.', events.threadID, events.messageID);
          }

          global.client.handleReply.push({
            type: 'reply',
            name: this.config.name,
            messageID: info.messageID,
            author: events.senderID,
            head: msg,
          });
        }, events.messageID);
      }
    } catch (error) {
      console.log(error);
      nayan.reply('An error has occurred, please try again later.', events.threadID, events.messageID);
    }
}
}


function loadTextStyles() {
  const Path = path.join(__dirname, 'system', 'textStyles.json');
  try {

    if (!fs.existsSync(Path)) {
      fs.writeFileSync(Path, JSON.stringify({}, null, 2));
    }


    const data = fs.readFileSync(Path, 'utf8');
    return JSON.parse(data);  
  } catch (error) {
    console.error('Error loading text styles:', error);
    return {}; 
  }
}

function saveTextStyle(threadID, style) {

  const styles = loadTextStyles(); 


  styles[threadID] = { style }; 

  const Path = path.join(__dirname, 'system', 'textStyles.json');
  try {

    fs.writeFileSync(Path, JSON.stringify(styles, null, 2));
  } catch (error) {
    console.error('Error saving text styles:', error);
  }
}
